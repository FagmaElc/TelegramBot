import random
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predictions = [
    "{user1} –∏ {user2} —Å–µ–≥–æ–¥–Ω—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—Å—è —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–π —Ü–µ–ª–∏.",
    "–ú–µ–∂–¥—É {user1} –∏ {user2} –ø—Ä–æ–±–µ–∂–∏—Ç –∏—Å–∫—Ä–∞... –∏–ª–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç.",
    "{user1} —É–∑–Ω–∞–µ—Ç —Å—Ç—Ä–∞—à–Ω—É—é —Ç–∞–π–Ω—É –æ {user2}.",
    "{user1} –∏ {user2} —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∂—É—Ç—Å—è –≤ –æ–¥–Ω–æ–º –ª–∏—Ñ—Ç–µ. –ë—É–¥–µ—Ç –Ω–µ–ª–æ–≤–∫–æ.",
    "{user1} –¥–æ–ª–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è —É–≥–æ—Å—Ç–∏—Ç—å {user2} –ø–∏—Ä–æ–∂–∫–æ–º.",
    "{user1} –∏ {user2} ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ—á—Ç–∏.",
    "{user1} —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—É–ø–∏—Ç –Ω–∞ –Ω–æ–≥—É {user2}. –ë–µ—Ä–µ–≥–∏ –Ω–æ–≥–∏!",
    "{user1} –∏ {user2} –Ω–µ –∑–∞–±—É–¥—É—Ç —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏–∫–æ–≥–¥–∞.",
]

# –õ—é–±–æ–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
love_predictions = [
    "{user1} –≤—Ç–∞–π–Ω–µ –≤–ª—é–±–ª—ë–Ω(–∞) –≤ {user2} üíò",
    "–°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ {user1} –∏ {user2} —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ üåπ",
    "{user1} –∏ {user2} —Å–µ–≥–æ–¥–Ω—è –Ω–∞—á–Ω—É—Ç –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏ üìñ",
    "{user1} —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç —Å–µ—Ä–¥–µ—á–∫–æ –æ—Ç {user2} ‚ù§Ô∏è",
    "–ú–µ–∂–¥—É {user1} –∏ {user2} –≤—Å–ø—ã—Ö–Ω–µ—Ç –∏—Å–∫—Ä–∞... –¥–µ—Ä–∂–∏—Ç–µ—Å—å üî•",
    "{user1} –∏ {user2} ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–æ—á–∫–∞. –ù—É, –ø–æ—á—Ç–∏ üòè",
    "{user1} –Ω–∞–ø–∏—à–µ—Ç —Ä–æ–º–∞–Ω –ø—Ä–æ {user2}, –Ω–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è ü§´",
    "{user1} –∏ {user2} –ø–æ–µ–¥—É—Ç –≤–º–µ—Å—Ç–µ –≤ –æ—Ç–ø—É—Å–∫... –≤–æ —Å–Ω–µ üèñÔ∏è",
]

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
chat_members = {}

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def track_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in chat_members:
        chat_members[chat_id] = set()

    username = f"@{user.username}" if user.username else user.full_name
    chat_members[chat_id].add(username)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞–±–∞ –ú–∞–Ω—è. –ù–∞–ø–∏—à–∏ /prediction –∏–ª–∏ /lovestory, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—É–¥—å–±—É!")

# –ö–æ–º–∞–Ω–¥–∞ /prediction
async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_duo_prediction(update, context, predictions)

# –ö–æ–º–∞–Ω–¥–∞ /lovestory
async def love_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_duo_prediction(update, context, love_predictions)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
async def send_duo_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE, prediction_list):
    chat_id = update.effective_chat.id
    members = list(chat_members.get(chat_id, []))

    if len(members) < 2:
        await update.message.reply_text("–ú–Ω–µ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ—á–∫—É!")
        return

    user1, user2 = random.sample(members, 2)
    prediction = random.choice(prediction_list).format(user1=user1, user2=user2)
    await update.message.reply_text(prediction)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    
    TOKEN = os.environ["BOT_TOKEN"] # –ó–∞–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω –Ω–∞ —Å–≤–æ–π
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prediction", predict))
    app.add_handler(CommandHandler("lovestory", love_story))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_user))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
