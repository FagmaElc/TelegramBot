import os
import random
import asyncio
from flask import Flask
from threading import Thread

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# --- Flask –¥–ª—è Render Health Check ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–ë–∞–±–∞ –ú–∞–Ω—è –∂–∏–≤—ë—Ç üîÆ"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)

# --- Telegram –ª–æ–≥–∏–∫–∞ ---

# –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predictions = [
    "{user1} –∏ {user2} —Å–µ–≥–æ–¥–Ω—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—Å—è —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–π —Ü–µ–ª–∏.",
    "–ú–µ–∂–¥—É {user1} –∏ {user2} –ø—Ä–æ–±–µ–∂–∏—Ç –∏—Å–∫—Ä–∞... –∏–ª–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç.",
    "{user1} —É–∑–Ω–∞–µ—Ç —Å—Ç—Ä–∞—à–Ω—É—é —Ç–∞–π–Ω—É –æ {user2}.",
    "{user1} –∏ {user2} —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∂—É—Ç—Å—è –≤ –æ–¥–Ω–æ–º –ª–∏—Ñ—Ç–µ. –ë—É–¥–µ—Ç –Ω–µ–ª–æ–≤–∫–æ.",
    "{user1} –¥–æ–ª–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è —É–≥–æ—Å—Ç–∏—Ç—å {user2} –ø–∏—Ä–æ–∂–∫–æ–º.",
    "{user1} –∏ {user2} ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ—á—Ç–∏.",
    "{user1} —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—É–ø–∏—Ç –Ω–∞ –Ω–æ–≥—É {user2}. –ë–µ—Ä–µ–≥–∏ –Ω–æ–≥–∏!",
    "{user1} –∏ {user2} –Ω–µ –∑–∞–±—É–¥—É—Ç —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏–∫–æ–≥–¥–∞.",
]

# –õ—é–±–æ–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
love_predictions = [
    "{user1} –≤—Ç–∞–π–Ω–µ –≤–ª—é–±–ª—ë–Ω(–∞) –≤ {user2} üíò",
    "–°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ {user1} –∏ {user2} —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ üåπ",
    "{user1} –∏ {user2} —Å–µ–≥–æ–¥–Ω—è –Ω–∞—á–Ω—É—Ç –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏ üìñ",
    "{user1} —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç —Å–µ—Ä–¥–µ—á–∫–æ –æ—Ç {user2} ‚ù§Ô∏è",
    "–ú–µ–∂–¥—É {user1} –∏ {user2} –≤—Å–ø—ã—Ö–Ω–µ—Ç –∏—Å–∫—Ä–∞... –¥–µ—Ä–∂–∏—Ç–µ—Å—å üî•",
    "{user1} –∏ {user2} ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–æ—á–∫–∞. –ù—É, –ø–æ—á—Ç–∏ üòè",
    "{user1} –Ω–∞–ø–∏—à–µ—Ç —Ä–æ–º–∞–Ω –ø—Ä–æ {user2}, –Ω–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è ü§´",
    "{user1} –∏ {user2} –ø–æ–µ–¥—É—Ç –≤–º–µ—Å—Ç–µ –≤ –æ—Ç–ø—É—Å–∫... –≤–æ —Å–Ω–µ üèñÔ∏è",
]

chat_members = {}
chat_ids = set()

async def track_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    chat_ids.add(chat_id)

    if chat_id not in chat_members:
        chat_members[chat_id] = set()

    username = f"@{user.username}" if user.username else user.full_name
    chat_members[chat_id].add(username)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞–±–∞ –ú–∞–Ω—è. –ù–∞–ø–∏—à–∏ /prediction –∏–ª–∏ /lovestory, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—É–¥—å–±—É!")

async def prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_prediction(update, context, predictions)

async def love_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_prediction(update, context, love_predictions)

async def send_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE, source):
    chat_id = update.effective_chat.id
    members = list(chat_members.get(chat_id, []))
    if len(members) < 2:
        await update.message.reply_text("–ú–Ω–µ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!")
        return
    user1, user2 = random.sample(members, 2)
    text = random.choice(source).format(user1=user1, user2=user2)
    await update.message.reply_text(text)

async def auto_post(app):
    await asyncio.sleep(10)
    while True:
        for chat_id in chat_ids:
            members = list(chat_members.get(chat_id, []))
            if len(members) >= 2:
                user1, user2 = random.sample(members, 2)
                text = random.choice(predictions).format(user1=user1, user2=user2)
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
        await asyncio.sleep(300)

def main():
    Thread(target=run_flask).start()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ

    TOKEN = os.environ["BOT_TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prediction", prediction))
    app.add_handler(CommandHandler("lovestory", love_story))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_user))

    async def after_startup(app):
        asyncio.create_task(auto_post(app))

    app.post_init = after_startup

    print("ü§ñ –ë–∞–±–∞ –ú–∞–Ω—è –∑–∞–ø—É—â–µ–Ω–∞!")
    app.run_polling()

if __name__ == "__main__":
    main()
