import os
import random
import asyncio
import datetime
from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# --- Flask ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–ë–∞–±–∞ –ú–∞–Ω—è –∂–∏–≤—ë—Ç üîÆ"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)

# --- Telegram –ª–æ–≥–∏–∫–∞ ---
predictions = [
    "{user1} –∏ {user2} —Å–µ–≥–æ–¥–Ω—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—Å—è —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–π —Ü–µ–ª–∏.",
    "–ú–µ–∂–¥—É {user1} –∏ {user2} –ø—Ä–æ–±–µ–∂–∏—Ç –∏—Å–∫—Ä–∞... –∏–ª–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç.",
    # ...
]

love_predictions = [
    "{user1} –≤—Ç–∞–π–Ω–µ –≤–ª—é–±–ª—ë–Ω(–∞) –≤ {user2} üíò",
    # ...
]

# –ì–æ—Ä–æ—Å–∫–æ–ø—ã
horoscope_texts = [
    "–î–µ–Ω—å –±—É–¥–µ—Ç —É–¥–∞—á–Ω—ã–º –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
    "–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –¥–µ—Ä–∂–∞—Ç—å—Å—è –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.",
    "–£–ª—ã–±–Ω–∏—Å—å ‚Äî –∏ –¥–µ–Ω—å —É–ª—ã–±–Ω—ë—Ç—Å—è —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç.",
    "–í—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª.",
    "–•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏.",
    "–ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî –æ–Ω–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.",
    "–ù–µ–±–µ—Å–∞ –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º.",
    "–î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.",
    "–õ—É—á—à–µ –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞.",
    "–£–¥–µ–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.",
    "–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø—Ä–∏—è—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ–º —á–µ–≥–æ-—Ç–æ –≤–∞–∂–Ω–æ–≥–æ.",
]

zodiac_signs = {
    "‚ôàÔ∏è–û–≤–µ–Ω": "21.03‚Äì19.04",
    "‚ôâÔ∏è–¢–µ–ª–µ—Ü": "20.04‚Äì20.05",
    "‚ôäÔ∏è–ë–ª–∏–∑–Ω–µ—Ü—ã": "21.05‚Äì20.06",
    "‚ôãÔ∏è–†–∞–∫": "21.06‚Äì22.07",
    "‚ôåÔ∏è–õ–µ–≤": "23.07‚Äì22.08",
    "‚ôçÔ∏è–î–µ–≤–∞": "23.08‚Äì22.09",
    "‚ôéÔ∏è–í–µ—Å—ã": "23.09‚Äì22.10",
    "‚ôèÔ∏è–°–∫–æ—Ä–ø–∏–æ–Ω": "23.10‚Äì21.11",
    "‚ôêÔ∏è–°—Ç—Ä–µ–ª–µ—Ü": "22.11‚Äì21.12",
    "‚ôëÔ∏è–ö–æ–∑–µ—Ä–æ–≥": "22.12‚Äì19.01",
    "‚ôíÔ∏è–í–æ–¥–æ–ª–µ–π": "20.01‚Äì18.02",
    "‚ôìÔ∏è–†—ã–±—ã": "19.02‚Äì20.03"
}

chat_members = {}
chat_ids = set()
last_horoscope_usage = {}

async def track_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    chat_ids.add(chat_id)

    if chat_id not in chat_members:
        chat_members[chat_id] = set()
    username = f"@{user.username}" if user.username else user.full_name
    chat_members[chat_id].add(username)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞–±–∞ –ú–∞–Ω—è. –ù–∞–ø–∏—à–∏ /prediction –∏–ª–∏ /lovestory, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—É–¥—å–±—É!")

async def prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_prediction(update, context, predictions)

async def love_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_prediction(update, context, love_predictions)

async def send_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE, source):
    chat_id = update.effective_chat.id
    members = list(chat_members.get(chat_id, []))
    if len(members) < 2:
        await update.message.reply_text("–ú–Ω–µ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!")
        return
    user1, user2 = random.sample(members, 2)
    text = random.choice(source).format(user1=user1, user2=user2)
    await update.message.reply_text(text)

async def horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = datetime.datetime.now()
    last_used = last_horoscope_usage.get(user_id)

    if last_used and (now - last_used).total_seconds() < 86400:
        await update.message.reply_text("üîí –ì–æ—Ä–æ—Å–∫–æ–ø –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.")
        return

    last_horoscope_usage[user_id] = now
    message = "üåü –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for sign, dates in zodiac_signs.items():
        prediction = random.choice(horoscope_texts)
        message += f"‚ôà {sign} ({dates}): {prediction}\n"
    await update.message.reply_text(message)

async def auto_post(app):
    await asyncio.sleep(10)
    while True:
        for chat_id in chat_ids:
            members = list(chat_members.get(chat_id, []))
            if len(members) >= 2:
                user1, user2 = random.sample(members, 2)
                text = random.choice(predictions).format(user1=user1, user2=user2)
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
        await asyncio.sleep(300)

def main():
    Thread(target=run_flask).start()

    TOKEN = os.environ["BOT_TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prediction", prediction))
    app.add_handler(CommandHandler("lovestory", love_story))
    app.add_handler(CommandHandler("horoscope", horoscope))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_user))

    async def after_startup(app):
        asyncio.create_task(auto_post(app))

    app.post_init = after_startup

    print("ü§ñ –ë–∞–±–∞ –ú–∞–Ω—è –∑–∞–ø—É—â–µ–Ω–∞!")
    app.run_polling()

if __name__ == "__main__":
    main()
