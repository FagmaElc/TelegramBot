import os
import random
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predictions = [
    "{user1} –∏ {user2} —Å–µ–≥–æ–¥–Ω—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—Å—è —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–π —Ü–µ–ª–∏.",
    "{user1} –¥–æ–ª–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è —É–≥–æ—Å—Ç–∏—Ç—å {user2} –ø–∏—Ä–æ–∂–∫–æ–º.",
    "{user1} —É–∑–Ω–∞–µ—Ç —Å—Ç—Ä–∞—à–Ω—É—é —Ç–∞–π–Ω—É –æ {user2}.",
    "–ú–µ–∂–¥—É {user1} –∏ {user2} –ø—Ä–æ–±–µ–∂–∏—Ç –∏—Å–∫—Ä–∞... –∏–ª–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç.",
]

love_predictions = [
    "{user1} –≤—Ç–∞–π–Ω–µ –≤–ª—é–±–ª—ë–Ω(–∞) –≤ {user2} üíò",
    "–°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ {user1} –∏ {user2} —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ üåπ",
    "{user1} –∏ {user2} –Ω–∞—á–Ω—É—Ç –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏ üìñ",
    "{user1} –ø–æ–ª—É—á–∏—Ç —Å–µ—Ä–¥–µ—á–∫–æ –æ—Ç {user2} ‚ù§Ô∏è",
]

chat_members = {}
target_chat_id = None

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def track_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global target_chat_id
    chat_id = update.effective_chat.id
    user = update.effective_user

    if target_chat_id is None:
        target_chat_id = chat_id
        print(f"üìå –°–æ—Ö—Ä–∞–Ω—ë–Ω chat_id: {target_chat_id}")

    if chat_id not in chat_members:
        chat_members[chat_id] = set()

    username = f"@{user.username}" if user.username else user.full_name
    chat_members[chat_id].add(username)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞–±–∞ –ú–∞–Ω—è. –ù–∞–ø–∏—à–∏ /prediction –∏–ª–∏ /lovestory!")

async def prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_prediction(update.effective_chat.id, context, predictions)

async def love_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_prediction(update.effective_chat.id, context, love_predictions)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
async def send_prediction(chat_id, context: ContextTypes.DEFAULT_TYPE, pred_list):
    members = list(chat_members.get(chat_id, []))
    if len(members) < 2:
        await context.bot.send_message(chat_id, "–ú–Ω–µ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á–∞—Ç–µ!")
        return
    user1, user2 = random.sample(members, 2)
    text = random.choice(pred_list).format(user1=user1, user2=user2)
    await context.bot.send_message(chat_id, text)

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)
async def auto_post(app):
    await app.bot.wait_until_ready()
    while True:
        if target_chat_id and target_chat_id in chat_members and len(chat_members[target_chat_id]) >= 2:
            user1, user2 = random.sample(list(chat_members[target_chat_id]), 2)
            text = random.choice(predictions).format(user1=user1, user2=user2)
        else:
            text = "–ñ–¥—É, –∫–æ–≥–¥–∞ –≤ —á–∞—Ç–µ –±—É–¥–µ—Ç –º–∏–Ω–∏–º—É–º –¥–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üôÉ"

        try:
            if target_chat_id:
                await app.bot.send_message(chat_id=target_chat_id, text=text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")

        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫
def main():
    TOKEN = os.environ["BOT_TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prediction", prediction))
    app.add_handler(CommandHandler("lovestory", love_story))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_user))

    app.post_init = lambda _: asyncio.create_task(auto_post(app))

    print("ü§ñ –ë–∞–±–∞ –ú–∞–Ω—è –∑–∞–ø—É—â–µ–Ω–∞!")
    app.run_polling()

if __name__ == "__main__":
    main()
